import logging
import random
import asyncio
import yfinance as yf
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# ==== –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù –°–Æ–î–ê ====
API_TOKEN = "YOUR_BOT_TOKEN"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
def get_signal():
    pairs = ["EURUSD=X", "GBPUSD=X", "USDJPY=X", "AUDUSD=X", "USDCAD=X"]
    pair = random.choice(pairs)
    
    data = yf.download(pair, period="1d", interval="1m")
    if data.empty:
        return None
    
    last_price = round(data["Close"].iloc[-1], 5)
    signal_type = random.choice(["üìà BUY", "üìâ SELL"])
    time_to_exit = random.randint(1, 5)  # –º–∏–Ω—É—Ç—ã
    
    return {
        "pair": pair.replace("=X", ""),
        "signal": signal_type,
        "price": last_price,
        "time": time_to_exit
    }

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /signal, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.")

# –ö–æ–º–∞–Ω–¥–∞ /signal
@dp.message(Command("signal"))
async def signal_handler(message: types.Message):
    signal = get_signal()
    if signal:
        response = (
            f"üìä Pair: {signal['pair']}\n"
            f"Signal: {signal['signal']}\n"
            f"Price: {signal['price']}\n"
            f"‚è± Time: {signal['time']} min"
        )
        await message.answer(response)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
